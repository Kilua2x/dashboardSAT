<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Analítico de Retención Estudiantil UAC</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f7fa;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        header {
            text-align: center;
            margin-bottom: 30px;
        }
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 20px;
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card h2 {
            color: #3498db;
            font-size: 1.5rem;
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .full-width {
            grid-column: 1 / -1;
        }
        .chart-container {
            height: 300px;
            position: relative;
            margin-bottom: 15px;
        }
        .chart-analysis {
            background-color: #f8f9fa;
            border-left: 3px solid #3498db;
            padding: 10px 15px;
            margin-top: 15px;
            border-radius: 4px;
            font-size: 0.95rem;
        }
        .chart-analysis h4 {
            margin: 0 0 5px 0;
            color: #2c3e50;
        }
        .chart-analysis p {
            margin: 0;
            line-height: 1.5;
        }
        .stats-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }
        .stat-box {
            flex: 1;
            min-width: 120px;
            background-color: #f8f9fa;
            border-radius: 6px;
            padding: 15px;
            text-align: center;
            border-left: 4px solid #3498db;
            transition: transform 0.2s ease;
        }
        .stat-box:hover {
            transform: translateY(-3px);
        }
        .stat-box h3 {
            margin: 0;
            font-size: 0.9rem;
            color: #7f8c8d;
        }
        .stat-box p {
            margin: 10px 0 0;
            font-size: 1.8rem;
            font-weight: bold;
            color: #2c3e50;
        }
        .risk-high {
            border-left-color: #e74c3c;
        }
        .risk-medium {
            border-left-color: #f39c12;
        }
        .risk-none {
            border-left-color: #2ecc71;
        }
        .filters {
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 15px;
        }
        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
            flex: 1;
            min-width: 150px;
        }
        .filter-group label {
            font-size: 0.9rem;
            color: #7f8c8d;
            font-weight: 600;
        }
        .filters input[type="file"] {
            flex: 1;
            min-width: 250px;
        }
        .filters select {
            padding: 8px 12px;
            border-radius: 4px;
            border: 1px solid #ddd;
            background-color: white;
            width: 100%;
        }
        .btn-group {
            display: flex;
            gap: 10px;
            margin-left: auto;
        }
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-primary {
            background-color: #3498db;
            color: white;
        }
        .btn-success {
            background-color: #2ecc71;
            color: white;
        }
        .btn-warning {
            background-color: #f39c12;
            color: white;
        }
        .btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .table-container {
            overflow-x: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        tr:hover {
            background-color: #f5f5f5;
        }
        .legend {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 15px;
        }
        .legend-item {
            display: flex;
            align-items: center;
            margin-right: 15px;
        }
        .legend-color {
            width: 15px;
            height: 15px;
            border-radius: 3px;
            margin-right: 5px;
        }
        .loader {
            display: none;
            text-align: center;
            padding: 20px;
        }
        .loader div {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #3498db;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .alert {
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            display: none;
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .filter-badge {
            display: inline-block;
            padding: 5px 10px;
            background-color: #e9f7fd;
            color: #3498db;
            border-radius: 20px;
            margin-right: 10px;
            margin-bottom: 10px;
            font-size: 0.9rem;
            font-weight: 600;
        }
        .applied-filters {
            margin-bottom: 20px;
            padding: 10px;
            border-radius: 8px;
            background-color: #f8f9fa;
            display: none;
        }
        .conclusions-section {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .conclusions-section h2 {
            color: #2c3e50;
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .conclusion-card {
            background-color: #f8f9fa;
            border-left: 4px solid #3498db;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 4px;
        }
        .conclusion-card h3 {
            margin-top: 0;
            color: #2c3e50;
        }
        .recommendation-item {
            display: flex;
            align-items: flex-start;
            margin-bottom: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            border-left: 4px solid #2ecc71;
        }
        .recommendation-icon {
            background-color: #2ecc71;
            color: white;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            flex-shrink: 0;
        }
        .recommendation-content h4 {
            margin-top: 0;
            margin-bottom: 5px;
            color: #2c3e50;
        }
        .recommendation-content p {
            margin: 0;
            color: #7f8c8d;
        }
        .priority-high .recommendation-icon {
            background-color: #e74c3c;
        }
        .priority-medium .recommendation-icon {
            background-color: #f39c12;
        }
        /* Estilos específicos para impresión */
        @page {
            size: letter portrait;
            margin: 1.5cm;
        }
        @media print {
            body {
                background-color: white;
                padding: 0;
                margin: 0;
            }
            .container {
                max-width: 100%;
            }
            .card {
                break-inside: avoid;
                box-shadow: none;
                border: 1px solid #ddd;
            }
            .filters, .no-print {
                display: none;
            }
            .dashboard {
                display: block;
            }
            .full-width {
                width: 100%;
            }
            .chart-container {
                height: 200px;
            }
            table {
                font-size: 9pt;
            }
            th, td {
                padding: 5px 8px;
            }
            .chart-analysis, .conclusion-card, .recommendation-item {
                border: 1px solid #ddd;
                border-left-width: 4px;
            }
        }
        @media (max-width: 768px) {
            .dashboard {
                grid-template-columns: 1fr;
            }
            .stat-box {
                min-width: 100px;
            }
            .filters {
                flex-direction: column;
                align-items: stretch;
            }
            .btn-group {
                margin-left: 0;
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Dashboard Analítico de Retención Estudiantil UAC</h1>
            <p>Análisis avanzado de datos de retención estudiantil para identificación temprana de riesgos y estrategias de intervención</p>
        </header>
        
        <div class="filters">
            <div class="filter-group">
                <label for="excel-file">Cargar archivo Excel</label>
                <input type="file" id="excel-file" accept=".xlsx, .xls" />
            </div>
            
            <div class="filter-group">
                <label for="campus-filter">Sede</label>
                <select id="campus-filter">
                    <option value="todos">Todas las sedes</option>
                    <!-- Opciones se cargarán dinámicamente -->
                </select>
            </div>
            
            <div class="filter-group">
                <label for="faculty-filter">Facultad</label>
                <select id="faculty-filter">
                    <option value="todos">Todas las facultades</option>
                    <!-- Opciones se cargarán dinámicamente -->
                </select>
            </div>
            
            <div class="filter-group">
                <label for="risk-filter">Tipo de Riesgo</label>
                <select id="risk-filter">
                    <option value="todos">Todos los riesgos</option>
                    <option value="MOROSIDAD">Morosidad</option>
                    <option value="NOTAS INSUFICIENTES">Notas Insuficientes</option>
                    <option value="INASISTENCIA">Inasistencia</option>
                    <option value="ENCUESTA CARACTERIZACIÓN">Encuesta Caracterización</option>
                </select>
            </div>
            
            <div class="btn-group">
                <button id="process-button" class="btn btn-primary">Procesar Datos</button>
                <button id="apply-filters" class="btn btn-warning">Aplicar Filtros</button>
                <button id="generate-pdf" class="btn btn-success">Generar Informe PDF</button>
            </div>
        </div>
        
        <div id="applied-filters" class="applied-filters">
            <h3>Filtros aplicados:</h3>
            <div id="filter-badges"></div>
        </div>
        
        <div id="success-alert" class="alert alert-success">
            Datos procesados correctamente. El dashboard ha sido actualizado.
        </div>
        
        <div id="error-alert" class="alert alert-danger">
            Error al procesar el archivo. Asegúrese de que sea un archivo Excel válido con la estructura correcta.
        </div>
        
        <div id="loader" class="loader">
            <div></div>
            <span>Procesando datos...</span>
        </div>
        
        <div id="dashboard-content">
            <section class="dashboard">
                <div class="card">
                    <h2>Resumen General</h2>
                    <div class="stats-container">
                        <div class="stat-box">
                            <h3>Total Estudiantes</h3>
                            <p id="total-students">430</p>
                        </div>
                        <div class="stat-box risk-high">
                            <h3>Riesgo Alto</h3>
                            <p id="high-risk">253</p>
                        </div>
                        <div class="stat-box risk-medium">
                            <h3>Riesgo Medio</h3>
                            <p id="medium-risk">84</p>
                        </div>
                        <div class="stat-box risk-none">
                            <h3>Sin Riesgo</h3>
                            <p id="no-risk">93</p>
                        </div>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="summary-analysis">El 59% de los estudiantes presenta riesgo alto, mientras que el 19.5% presenta riesgo medio. Solo el 21.5% no presenta indicadores de riesgo significativos, lo que sugiere la necesidad de implementar medidas de retención urgentes.</p>
                    </div>
                </div>
                
                <div class="card">
                    <h2>Distribución por Sexo</h2>
                    <div class="chart-container">
                        <canvas id="gender-chart"></canvas>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="gender-analysis">La distribución por género muestra una mayor proporción de estudiantes femeninas (56%) que masculinos (44%). Esta diferencia debe considerarse al diseñar estrategias de retención específicas por género.</p>
                    </div>
                </div>
                
                <div class="card">
                    <h2>Distribución por Sede</h2>
                    <div class="chart-container">
                        <canvas id="campus-chart"></canvas>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="campus-analysis">La Sede San Felipe concentra el 44% del total de estudiantes, seguida de Los Andes (29%) y Calama (18%). Esta distribución geográfica debe orientar la asignación de recursos para intervenciones de retención.</p>
                    </div>
                </div>
                
                <div class="card">
                    <h2>Distribución por Facultad</h2>
                    <div class="chart-container">
                        <canvas id="faculty-chart"></canvas>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="faculty-analysis">La Facultad de Ingeniería, Tecnología e Innovación representa el 40% de los estudiantes, seguida por Salud (31%) y Humanidades (29%). La distribución de recursos para retención debe considerar esta proporcionalidad.</p>
                    </div>
                </div>
                
                <div class="card full-width">
                    <h2>Distribución de Tipos de Riesgo</h2>
                    <div class="chart-container">
                        <canvas id="risk-chart"></canvas>
                    </div>
                    <div class="legend">
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #e74c3c;"></div>
                            <span>Alto</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #f39c12;"></div>
                            <span>Medio</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #2ecc71;"></div>
                            <span>Sin Riesgo</span>
                        </div>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="risk-analysis">Los factores de riesgo más críticos son la Encuesta de Caracterización (84% de estudiantes en riesgo alto) y la Inasistencia (74% en riesgo alto). La Morosidad (32%) y las Notas Insuficientes (25%) también muestran niveles significativos. Se recomienda priorizar intervenciones para abordar inasistencia y los factores detectados en la encuesta.</p>
                    </div>
                </div>
                
                <div class="card full-width">
                    <h2>Top Carreras con Mayor Riesgo</h2>
                    <div class="chart-container">
                        <canvas id="programs-risk-chart"></canvas>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="programs-analysis">Psicología muestra la mayor proporción de estudiantes en riesgo alto (69%), seguida por Ingeniería Industrial PCE (55%). Las intervenciones de retención deben priorizarse en estas carreras, especialmente considerando que Psicología pertenece a la facultad de Humanidades y presenta un patrón de riesgo diferente a las carreras técnicas.</p>
                    </div>
                </div>
                
                <div class="card full-width">
                    <h2>Estadísticas por Sede</h2>
                    <div class="table-container">
                        <table id="campus-stats">
                            <thead>
                                <tr>
                                    <th>Sede</th>
                                    <th>Total Estudiantes</th>
                                    <th>% Riesgo Alto</th>
                                    <th>% Riesgo Medio</th>
                                    <th>% Sin Riesgo</th>
                                    <th>% Morosidad</th>
                                    <th>% Notas Insuficientes</th>
                                    <th>% Inasistencia</th>
                                </tr>
                            </thead>
                            <tbody id="campus-stats-body">
                                <!-- Datos serán generados dinámicamente -->
                            </tbody>
                        </table>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="campus-stats-analysis">La Sede San Felipe presenta el mayor porcentaje de estudiantes con riesgo alto (73%), mientras que Calama muestra la proporción más baja (37%). La inasistencia es particularmente alta en Rancagua (97%) y San Felipe (87%). Las estrategias de retención deben adaptarse a los perfiles de riesgo específicos de cada sede.</p>
                    </div>
                </div>
                
                <div class="card full-width">
                    <h2>Distribución de Factores de Riesgo por Facultad</h2>
                    <div class="chart-container">
                        <canvas id="faculty-risk-chart"></canvas>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="faculty-risk-analysis">Humanidades presenta el mayor riesgo por inasistencia (87%) y encuesta de caracterización (93%), mientras que Salud muestra el mayor porcentaje en notas insuficientes (49%). Ingeniería tiene la tasa más alta de morosidad (42%). Cada facultad requiere estrategias diferenciadas que aborden sus factores de riesgo específicos.</p>
                    </div>
                </div>
                
                <div class="card full-width">
                    <h2>Estudiantes con Mayor Riesgo - Facultad de Ingeniería, Tecnología e Innovación</h2>
                    <div class="table-container">
                        <table id="engineering-high-risk">
                            <thead>
                                <tr>
                                    <th>Código</th>
                                    <th>Nombre</th>
                                    <th>Carrera</th>
                                    <th>Sede</th>
                                    <th>Modalidad</th>
                                    <th>Morosidad</th>
                                    <th>Notas Insuficientes</th>
                                    <th>Inasistencia</th>
                                    <th>Encuesta Caracterización</th>
                                </tr>
                            </thead>
                            <tbody id="engineering-high-risk-body">
                                <!-- Datos serán generados dinámicamente -->
                            </tbody>
                        </table>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="engineering-students-analysis">Los estudiantes de Ingeniería Industrial PCE e Ingeniería en Electricidad PCE presentan los mayores niveles de riesgo combinado. La mayoría de estos estudiantes críticos cursan en modalidad semipresencial, sugiriendo posibles desafíos de adaptación a este formato.</p>
                    </div>
                </div>
                
                <div class="card full-width">
                    <h2>Estudiantes con Mayor Riesgo - Facultad de Salud</h2>
                    <div class="table-container">
                        <table id="health-high-risk">
                            <thead>
                                <tr>
                                    <th>Código</th>
                                    <th>Nombre</th>
                                    <th>Carrera</th>
                                    <th>Sede</th>
                                    <th>Modalidad</th>
                                    <th>Morosidad</th>
                                    <th>Notas Insuficientes</th>
                                    <th>Inasistencia</th>
                                    <th>Encuesta Caracterización</th>
                                </tr>
                            </thead>
                            <tbody id="health-high-risk-body">
                                <!-- Datos serán generados dinámicamente -->
                            </tbody>
                        </table>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="health-students-analysis">Los estudiantes de Enfermería y Kinesiología muestran altos niveles de riesgo combinado. A diferencia de Ingeniería, estos estudiantes son mayoritariamente presenciales, sugiriendo que los factores de riesgo están más relacionados con exigencias académicas y financieras que con la modalidad.</p>
                    </div>
                </div>
                
                <div class="card full-width">
                    <h2>Estudiantes con Mayor Riesgo - Facultad de Humanidades, Ciencias Jurídicas y Sociales</h2>
                    <div class="table-container">
                        <table id="humanities-high-risk">
                            <thead>
                                <tr>
                                    <th>Código</th>
                                    <th>Nombre</th>
                                    <th>Carrera</th>
                                    <th>Sede</th>
                                    <th>Modalidad</th>
                                    <th>Morosidad</th>
                                    <th>Notas Insuficientes</th>
                                    <th>Inasistencia</th>
                                    <th>Encuesta Caracterización</th>
                                </tr>
                            </thead>
                            <tbody id="humanities-high-risk-body">
                                <!-- Datos serán generados dinámicamente -->
                            </tbody>
                        </table>
                    </div>
                    <div class="chart-analysis">
                        <h4>Análisis:</h4>
                        <p id="humanities-students-analysis">La carrera de Psicología concentra la mayor parte de estudiantes con alto riesgo en esta facultad. La presencia simultánea de morosidad, notas insuficientes e inasistencia en estos estudiantes sugiere una interrelación entre factores económicos y académicos que debe ser abordada integralmente.</p>
                    </div>
                </div>
            </section>
            
            <section class="conclusions-section">
                <h2>Diagnóstico Integral y Recomendaciones Estratégicas</h2>
                
                <div class="conclusion-card">
                    <h3>Diagnóstico General</h3>
                    <p id="general-conclusion">El análisis de los 430 estudiantes revela un panorama preocupante donde el 59% presenta al menos un indicador de riesgo alto. La inasistencia (74%) y los factores detectados en la encuesta de caracterización (84%) son los principales predictores de deserción, seguidos por morosidad (32%) y notas insuficientes (25%). La Sede San Felipe y las carreras de Psicología e Ingeniería Industrial PCE presentan los indicadores más críticos, requiriendo intervención prioritaria.</p>
                </div>
                
                <h3>Recomendaciones Estratégicas Basadas en Evidencia</h3>
                
                <div class="recommendation-item priority-high">
                    <div class="recommendation-icon">1</div>
                    <div class="recommendation-content">
                        <h4>Sistema de Alerta Temprana para Monitoreo de Asistencia</h4>
                        <p id="recommendation-1">Implementar un sistema automatizado de seguimiento de asistencia en tiempo real que envíe alertas al detectar patrones de inasistencia, especialmente en la Sede San Felipe y Rancagua donde este factor supera el 85%. Incluir notificaciones a estudiantes y tutores académicos cuando se alcancen umbrales críticos predefinidos.</p>
                    </div>
                </div>
                
                <div class="recommendation-item priority-high">
                    <div class="recommendation-icon">2</div>
                    <div class="recommendation-content">
                        <h4>Programa de Apoyo Financiero Focalizado</h4>
                        <p id="recommendation-2">Desarrollar un programa de becas parciales y planes de pago flexibles para estudiantes con alto riesgo por morosidad, priorizando las carreras de Psicología (69% en riesgo alto) e Ingeniería Industrial PCE (55% en riesgo alto). Establecer un sistema de consejería financiera preventiva para estudiantes identificados en situación de vulnerabilidad económica.</p>
                    </div>
                </div>
                
                <div class="recommendation-item priority-medium">
                    <div class="recommendation-icon">3</div>
                    <div class="recommendation-content">
                        <h4>Fortalecimiento de Tutorías Académicas Adaptativas</h4>
                        <p id="recommendation-3">Implementar un programa de tutorías personalizado para estudiantes con riesgo académico, con énfasis en la Facultad de Salud que presenta el mayor porcentaje (49%) de estudiantes con notas insuficientes. Incorporar metodologías de enseñanza adaptativas basadas en los patrones de aprendizaje identificados por carrera.</p>
                    </div>
                </div>
                
                <div class="recommendation-item priority-medium">
                    <div class="recommendation-icon">4</div>
                    <div class="recommendation-content">
                        <h4>Revisión Analítica de la Encuesta de Caracterización</h4>
                        <p id="recommendation-4">Realizar un análisis profundo de los resultados de la encuesta de caracterización utilizando técnicas de minería de datos para identificar patrones y factores predictivos específicos, considerando que el 84% de estudiantes presenta riesgo alto en este indicador. Rediseñar el instrumento para mejorar su capacidad predictiva e incluir variables sociodemográficas y psicoemocionales.</p>
                    </div>
                </div>
                
                <div class="recommendation-item">
                    <div class="recommendation-icon">5</div>
                    <div class="recommendation-content">
                        <h4>Programa de Intervención Diferenciada por Facultad</h4>
                        <p id="recommendation-5">Desarrollar programas específicos por facultad que aborden sus factores de riesgo particulares: para Humanidades, enfocarse en reducir inasistencia (87%); para Salud, implementar reforzamiento académico (49% con notas insuficientes); y para Ingeniería, establecer mecanismos de apoyo financiero (42% con morosidad).</p>
                    </div>
                </div>
            </section>
        </div>
    </div>

    <!-- Scripts necesarios -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
    <script>
        // Objeto para almacenar las instancias de gráficos
        const charts = {};
        
        // Almacenar los datos sin filtrar
        let originalData = null;
        
        // Datos iniciales para demostración
        let globalData = {
            totalStudents: 430,
            highRisk: 253,
            mediumRisk: 84,
            noRisk: 93,
            genderDistribution: {
                male: 190,
                female: 240
            },
            campusDistribution: {
                'SEDE SAN FELIPE': 188,
                'SEDE LOS ANDES': 126,
                'SEDE CALAMA': 76,
                'SEDE RANCAGUA': 30,
                'CAMPUS VIRTUAL': 30,
                'SEDE ANCUD': 9
            },
            facultyDistribution: {
                'INGENIERÍA, TECNOLOGÍA E INNOVACION': 173,
                'SALUD': 135,
                'HUMANIDADES, CIENCIAS JURÍDICAS Y SOCIALES': 122
            },
            riskTypes: {
                'MOROSIDAD': { high: 137, medium: 84, none: 209 },
                'DIAG. COMP. LEC': { high: 0, medium: 0, none: 430 },
                'DIAG. RAZ. LOG.': { high: 0, medium: 0, none: 430 },
                'NOTAS INSUFICIENTES': { high: 107, medium: 131, none: 192 },
                'INASISTENCIA': { high: 317, medium: 0, none: 113 },
                'INGRESO AL AULA': { high: 2, medium: 0, none: 428 },
                'ASIGNATURAS REPROBADAS': { high: 0, medium: 0, none: 430 },
                'ENCUESTA CARACTERIZACIÓN': { high: 363, medium: 0, none: 67 }
            },
            programsRisk: {
                'PSICOLOGÍA': { high: 68, medium: 20, none: 10 },
                'ENFERMERÍA': { high: 35, medium: 13, none: 17 },
                'INGENIERIA INDUSTRIAL PCE': { high: 43, medium: 22, none: 13 },
                'DERECHO': { high: 24, medium: 15, none: 8 },
                'TÉCNICO DE NIVEL SUPERIOR EN ENFERMERÍA': { high: 15, medium: 7, none: 7 },
                'INGENIERIA EN ELECTRICIDAD PCE': { high: 15, medium: 9, none: 9 },
                'TÉCNICO DE NIVEL SUPERIOR EN MECÁNICA INDUSTRIAL': { high: 18, medium: 7, none: 6 },
                'TÉCNICO DE NIVEL SUPERIOR EN AGRONOMÍA': { high: 8, medium: 5, none: 16 }
            },
            campusStats: [
                {
                    campus: 'SEDE SAN FELIPE',
                    total: 188,
                    highRiskPerc: 73,
                    mediumRiskPerc: 15,
                    noRiskPerc: 12,
                    morosidadPerc: 45,
                    notasPerc: 53,
                    inasistenciaPerc: 87
                },
                {
                    campus: 'SEDE LOS ANDES',
                    total: 126,
                    highRiskPerc: 52,
                    mediumRiskPerc: 26,
                    noRiskPerc: 22,
                    morosidadPerc: 43,
                    notasPerc: 38,
                    inasistenciaPerc: 83
                },
                {
                    campus: 'SEDE CALAMA',
                    total: 76,
                    highRiskPerc: 37,
                    mediumRiskPerc: 33,
                    noRiskPerc: 30,
                    morosidadPerc: 45,
                    notasPerc: 78,
                    inasistenciaPerc: 64
                },
                {
                    campus: 'SEDE RANCAGUA',
                    total: 30,
                    highRiskPerc: 57,
                    mediumRiskPerc: 30,
                    noRiskPerc: 13,
                    morosidadPerc: 33,
                    notasPerc: 53,
                    inasistenciaPerc: 97
                },
                {
                    campus: 'CAMPUS VIRTUAL',
                    total: 30,
                    highRiskPerc: 0,
                    mediumRiskPerc: 0,
                    noRiskPerc: 100,
                    morosidadPerc: 0,
                    notasPerc: 0,
                    inasistenciaPerc: 0
                },
                {
                    campus: 'SEDE ANCUD',
                    total: 9,
                    highRiskPerc: 56,
                    mediumRiskPerc: 22,
                    noRiskPerc: 22,
                    morosidadPerc: 33,
                    notasPerc: 67,
                    inasistenciaPerc: 100
                }
            ],
            facultyRisk: {
                'INGENIERÍA, TECNOLOGÍA E INNOVACION': [42, 36, 75, 91],
                'SALUD': [30, 49, 83, 92],
                'HUMANIDADES, CIENCIAS JURÍDICAS Y SOCIALES': [35, 42, 87, 93]
            },
            highRiskStudents: {
                engineering: [
                    {
                        code: '20251LAN548012',
                        name: 'NORMAN NICOLAS MARIN CORNEJO',
                        program: 'INGENIERIA INDUSTRIAL PCE',
                        campus: 'SEDE LOS ANDES',
                        modality: 'SEMIPRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251LAN619003',
                        name: 'MATIAS NICOLAS VERGARA MALDONADO',
                        program: 'TECNICO DE NIVEL SUPERIOR EN MINERIA Y METALURGIA',
                        campus: 'SEDE LOS ANDES',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251LAN619007',
                        name: 'SEBASTIAN IGNACIO CAMPOS CATALDO',
                        program: 'TECNICO DE NIVEL SUPERIOR EN MINERIA Y METALURGIA',
                        campus: 'SEDE LOS ANDES',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251LAN549015',
                        name: 'FRANCISCO BEIZA CANDIA',
                        program: 'INGENIERIA EN ELECTRICIDAD PCE',
                        campus: 'SEDE LOS ANDES',
                        modality: 'SEMIPRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251CAL548004',
                        name: 'KRISNA JAVIERA MILLARAY BERNA BERNA',
                        program: 'INGENIERIA INDUSTRIAL PCE',
                        campus: 'SEDE CALAMA',
                        modality: 'SEMIPRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    }
                ],
                health: [
                    {
                        code: '20251SFL007006',
                        name: 'JULIETA MARTINA MUNOZ CORTES',
                        program: 'ENFERMERÍA',
                        campus: 'SEDE SAN FELIPE',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251SFL007012',
                        name: 'CATALINA SCARLETH LEMUS ARANCIBIA',
                        program: 'ENFERMERÍA',
                        campus: 'SEDE SAN FELIPE',
                        modality: 'PRESENCIAL',
                        morosidad: 'MEDIO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251SFL030004',
                        name: 'CAROLINA MAGDALENA GARCIA PORRA',
                        program: 'KINESIOLOGÍA',
                        campus: 'SEDE SAN FELIPE',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251RAN007020',
                        name: 'JUAN FRANCISCO JAVIER SALAS MARACZY',
                        program: 'ENFERMERÍA',
                        campus: 'SEDE RANCAGUA',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251CAL007029',
                        name: 'JUNESSI NICOL VENEGAS GARCIA',
                        program: 'ENFERMERÍA',
                        campus: 'SEDE CALAMA',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    }
                ],
                humanities: [
                    {
                        code: '20251SFL041060',
                        name: 'PAULA FERNANDA ZEGERS OLGUIN',
                        program: 'PSICOLOGÍA',
                        campus: 'SEDE SAN FELIPE',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251SFL041049',
                        name: 'LUCIA CAROLINA TAPIA CARTAGENA',
                        program: 'PSICOLOGÍA',
                        campus: 'SEDE SAN FELIPE',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251SFL041048',
                        name: 'TERESITA IRENE CARCAMO SOLAR',
                        program: 'PSICOLOGÍA',
                        campus: 'SEDE SAN FELIPE',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251SFL041033',
                        name: 'MANUEL ISAIAS RIQUELME CASTRO',
                        program: 'PSICOLOGÍA',
                        campus: 'SEDE SAN FELIPE',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    },
                    {
                        code: '20251CAL041027',
                        name: 'PIA IGNACIA OSSANDON VARAS',
                        program: 'PSICOLOGÍA',
                        campus: 'SEDE CALAMA',
                        modality: 'PRESENCIAL',
                        morosidad: 'ALTO',
                        notas: 'ALTO',
                        inasistencia: 'ALTO',
                        encuesta: 'ALTO'
                    }
                ]
            },
            // Para almacenar los filtros aplicados
            appliedFilters: {
                campus: 'todos',
                faculty: 'todos',
                riskType: 'todos'
            }
        };

        // Función para inicializar todos los gráficos
        function initializeCharts() {
            // Gráfico de distribución por sexo
            charts.genderChart = new Chart(
                document.getElementById('gender-chart'),
                {
                    type: 'pie',
                    data: {
                        labels: ['Masculino', 'Femenino'],
                        datasets: [{
                            data: [globalData.genderDistribution.male, globalData.genderDistribution.female],
                            backgroundColor: [
                                '#3498db', '#e74c3c'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    font: {
                                        size: 14
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                },
                                titleFont: {
                                    size: 14
                                },
                                bodyFont: {
                                    size: 14
                                }
                            }
                        }
                    }
                }
            );
            
            // Gráfico de distribución por sede
            charts.campusChart = new Chart(
                document.getElementById('campus-chart'),
                {
                    type: 'pie',
                    data: {
                        labels: Object.keys(globalData.campusDistribution),
                        datasets: [{
                            data: Object.values(globalData.campusDistribution),
                            backgroundColor: [
                                '#3498db', '#2ecc71', '#f1c40f', '#e74c3c', '#9b59b6', '#1abc9c'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    font: {
                                        size: 14
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                },
                                titleFont: {
                                    size: 14
                                },
                                bodyFont: {
                                    size: 14
                                }
                            }
                        }
                    }
                }
            );
            
            // Gráfico de distribución por facultad
            charts.facultyChart = new Chart(
                document.getElementById('faculty-chart'),
                {
                    type: 'pie',
                    data: {
                        labels: Object.keys(globalData.facultyDistribution),
                        datasets: [{
                            data: Object.values(globalData.facultyDistribution),
                            backgroundColor: [
                                '#3498db', '#2ecc71', '#e74c3c'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    font: {
                                        size: 14
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                },
                                titleFont: {
                                    size: 14
                                },
                                bodyFont: {
                                    size: 14
                                }
                            }
                        }
                    }
                }
            );
            
            // Gráfico de distribución de tipos de riesgo
            charts.riskChart = new Chart(
                document.getElementById('risk-chart'),
                {
                    type: 'bar',
                    data: {
                        labels: Object.keys(globalData.riskTypes),
                        datasets: [
                            {
                                label: 'Alto',
                                data: Object.values(globalData.riskTypes).map(item => item.high),
                                backgroundColor: '#e74c3c',
                            },
                            {
                                label: 'Medio',
                                data: Object.values(globalData.riskTypes).map(item => item.medium),
                                backgroundColor: '#f39c12',
                            },
                            {
                                label: 'Sin Riesgo',
                                data: Object.values(globalData.riskTypes).map(item => item.none),
                                backgroundColor: '#2ecc71',
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                stacked: true,
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            y: {
                                stacked: true,
                                beginAtZero: true,
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    font: {
                                        size: 14
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.dataset.label || '';
                                        const value = context.raw || 0;
                                        const total = globalData.totalStudents;
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                },
                                titleFont: {
                                    size: 14
                                },
                                bodyFont: {
                                    size: 14
                                }
                            }
                        }
                    }
                }
            );
            
            // Gráfico de carreras con mayor riesgo
            charts.programsRiskChart = new Chart(
                document.getElementById('programs-risk-chart'),
                {
                    type: 'bar',
                    data: {
                        labels: Object.keys(globalData.programsRisk),
                        datasets: [
                            {
                                label: 'Riesgo Alto',
                                data: Object.values(globalData.programsRisk).map(item => item.high),
                                backgroundColor: '#e74c3c',
                            },
                            {
                                label: 'Riesgo Medio',
                                data: Object.values(globalData.programsRisk).map(item => item.medium),
                                backgroundColor: '#f39c12',
                            },
                            {
                                label: 'Sin Riesgo',
                                data: Object.values(globalData.programsRisk).map(item => item.none),
                                backgroundColor: '#2ecc71',
                            }
                        ]
                    },
                    options: {
                        indexAxis: 'y',
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                stacked: true,
                                beginAtZero: true,
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            y: {
                                stacked: true,
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    font: {
                                        size: 14
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.dataset.label || '';
                                        const value = context.raw || 0;
                                        const total = Object.values(globalData.programsRisk)[context.dataIndex].high + 
                                                       Object.values(globalData.programsRisk)[context.dataIndex].medium + 
                                                       Object.values(globalData.programsRisk)[context.dataIndex].none;
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                },
                                titleFont: {
                                    size: 14
                                },
                                bodyFont: {
                                    size: 14
                                }
                            }
                        }
                    }
                }
            );
            
            // Gráfico de factores de riesgo por facultad
            charts.facultyRiskChart = new Chart(
                document.getElementById('faculty-risk-chart'),
                {
                    type: 'radar',
                    data: {
                        labels: ['MOROSIDAD', 'NOTAS INSUFICIENTES', 'INASISTENCIA', 'ENCUESTA CARACTERIZACIÓN'],
                        datasets: [
                            {
                                label: 'INGENIERÍA, TECNOLOGÍA E INNOVACION',
                                data: globalData.facultyRisk['INGENIERÍA, TECNOLOGÍA E INNOVACION'],
                                backgroundColor: 'rgba(52, 152, 219, 0.2)',
                                borderColor: 'rgba(52, 152, 219, 1)',
                                pointBackgroundColor: 'rgba(52, 152, 219, 1)',
                                pointBorderColor: '#fff',
                                pointHoverBackgroundColor: '#fff',
                                pointHoverBorderColor: 'rgba(52, 152, 219, 1)',
                                borderWidth: 2,
                                pointRadius: 4
                            },
                            {
                                label: 'SALUD',
                                data: globalData.facultyRisk['SALUD'],
                                backgroundColor: 'rgba(46, 204, 113, 0.2)',
                                borderColor: 'rgba(46, 204, 113, 1)',
                                pointBackgroundColor: 'rgba(46, 204, 113, 1)',
                                pointBorderColor: '#fff',
                                pointHoverBackgroundColor: '#fff',
                                pointHoverBorderColor: 'rgba(46, 204, 113, 1)',
                                borderWidth: 2,
                                pointRadius: 4
                            },
                            {
                                label: 'HUMANIDADES, CIENCIAS JURÍDICAS Y SOCIALES',
                                data: globalData.facultyRisk['HUMANIDADES, CIENCIAS JURÍDICAS Y SOCIALES'],
                                backgroundColor: 'rgba(231, 76, 60, 0.2)',
                                borderColor: 'rgba(231, 76, 60, 1)',
                                pointBackgroundColor: 'rgba(231, 76, 60, 1)',
                                pointBorderColor: '#fff',
                                pointHoverBackgroundColor: '#fff',
                                pointHoverBorderColor: 'rgba(231, 76, 60, 1)',
                                borderWidth: 2,
                                pointRadius: 4
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            r: {
                                angleLines: {
                                    display: true
                                },
                                suggestedMin: 0,
                                suggestedMax: 100,
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                },
                                pointLabels: {
                                    font: {
                                        size: 14,
                                        weight: 'bold'
                                    }
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    font: {
                                        size: 14
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.dataset.label || '';
                                        const value = context.raw || 0;
                                        return `${label}: ${value}%`;
                                    }
                                },
                                titleFont: {
                                    size: 14
                                },
                                bodyFont: {
                                    size: 14
                                }
                            }
                        }
                    }
                }
            );
        }
        
        // Función para generar análisis para cada visualización
        function generateAnalysis() {
            // Análisis del resumen general
            const highRiskPerc = Math.round((globalData.highRisk / globalData.totalStudents) * 100);
            const mediumRiskPerc = Math.round((globalData.mediumRisk / globalData.totalStudents) * 100);
            const noRiskPerc = Math.round((globalData.noRisk / globalData.totalStudents) * 100);
            
            document.getElementById('summary-analysis').innerHTML = 
                `El ${highRiskPerc}% de los estudiantes presenta riesgo alto, mientras que el ${mediumRiskPerc}% presenta riesgo medio. Solo el ${noRiskPerc}% no presenta indicadores de riesgo significativos, lo que sugiere la necesidad de implementar medidas de retención urgentes.`;
            
            // Análisis de distribución por género
            const malePerc = Math.round((globalData.genderDistribution.male / globalData.totalStudents) * 100);
            const femalePerc = Math.round((globalData.genderDistribution.female / globalData.totalStudents) * 100);
            
            document.getElementById('gender-analysis').innerHTML = 
                `La distribución por género muestra una proporción de ${femalePerc}% de estudiantes femeninas y ${malePerc}% masculinos. ${
                    femalePerc > malePerc ? 
                    `Esta mayor presencia femenina debe considerarse al diseñar estrategias de retención específicas por género.` : 
                    `La distribución de género es un factor a considerar al diseñar estrategias de retención específicas.`
                }`;
            
            // Análisis de distribución por sede
            const campuses = Object.keys(globalData.campusDistribution);
            const campusValues = Object.values(globalData.campusDistribution);
            const totalStudents = campusValues.reduce((a, b) => a + b, 0);
            
            const topCampus = campuses[campusValues.indexOf(Math.max(...campusValues))];
            const topCampusPerc = Math.round((Math.max(...campusValues) / totalStudents) * 100);
            
            const secondCampusValue = [...campusValues].sort((a, b) => b - a)[1];
            const secondCampus = campuses[campusValues.indexOf(secondCampusValue)];
            const secondCampusPerc = Math.round((secondCampusValue / totalStudents) * 100);
            
            const thirdCampusValue = [...campusValues].sort((a, b) => b - a)[2];
            const thirdCampus = campuses[campusValues.indexOf(thirdCampusValue)];
            const thirdCampusPerc = Math.round((thirdCampusValue / totalStudents) * 100);
            
            document.getElementById('campus-analysis').innerHTML = 
                `${topCampus} concentra el ${topCampusPerc}% del total de estudiantes, seguida de ${secondCampus} (${secondCampusPerc}%) y ${thirdCampus} (${thirdCampusPerc}%). Esta distribución geográfica debe orientar la asignación de recursos para intervenciones de retención, priorizando las sedes con mayor concentración de estudiantes.`;
            
            // Análisis de distribución por facultad
            const faculties = Object.keys(globalData.facultyDistribution);
            const facultyValues = Object.values(globalData.facultyDistribution);
            
            const topFaculty = faculties[facultyValues.indexOf(Math.max(...facultyValues))];
            const topFacultyPerc = Math.round((Math.max(...facultyValues) / totalStudents) * 100);
            
            const secondFacultyValue = [...facultyValues].sort((a, b) => b - a)[1];
            const secondFaculty = faculties[facultyValues.indexOf(secondFacultyValue)];
            const secondFacultyPerc = Math.round((secondFacultyValue / totalStudents) * 100);
            
            const thirdFacultyValue = [...facultyValues].sort((a, b) => b - a)[2];
            const thirdFaculty = faculties[facultyValues.indexOf(thirdFacultyValue)];
            const thirdFacultyPerc = Math.round((thirdFacultyValue / totalStudents) * 100);
            
            document.getElementById('faculty-analysis').innerHTML = 
                `${topFaculty} representa el ${topFacultyPerc}% de los estudiantes, seguida por ${secondFaculty} (${secondFacultyPerc}%) y ${thirdFaculty} (${thirdFacultyPerc}%). La distribución de recursos para retención debe considerar esta proporcionalidad, reconociendo las necesidades específicas de cada facultad.`;
            
            // Análisis de tipos de riesgo
            const inasistenciaPerc = Math.round((globalData.riskTypes['INASISTENCIA'].high / globalData.totalStudents) * 100);
            const encuestaPerc = Math.round((globalData.riskTypes['ENCUESTA CARACTERIZACIÓN'].high / globalData.totalStudents) * 100);
            const morosidadPerc = Math.round((globalData.riskTypes['MOROSIDAD'].high / globalData.totalStudents) * 100);
            const notasPerc = Math.round((globalData.riskTypes['NOTAS INSUFICIENTES'].high / globalData.totalStudents) * 100);
            
            document.getElementById('risk-analysis').innerHTML = 
                `Los factores de riesgo más críticos son la Encuesta de Caracterización (${encuestaPerc}% de estudiantes en riesgo alto) y la Inasistencia (${inasistenciaPerc}% en riesgo alto). La Morosidad (${morosidadPerc}%) y las Notas Insuficientes (${notasPerc}%) también muestran niveles significativos. Se recomienda priorizar intervenciones para abordar inasistencia y los factores detectados en la encuesta, sin descuidar el apoyo financiero y académico.`;
            
            // Análisis de carreras con mayor riesgo
            const programs = Object.keys(globalData.programsRisk);
            const programHighRiskValues = Object.values(globalData.programsRisk).map(item => item.high);
            
            // Encontrar los programas con mayor riesgo alto
            const topProgram = programs[programHighRiskValues.indexOf(Math.max(...programHighRiskValues))];
            const topProgramTotal = globalData.programsRisk[topProgram].high + globalData.programsRisk[topProgram].medium + globalData.programsRisk[topProgram].none;
            const topProgramPerc = Math.round((globalData.programsRisk[topProgram].high / topProgramTotal) * 100);
            
            // Segundo programa con mayor riesgo
            const secondProgramValue = [...programHighRiskValues].sort((a, b) => b - a)[1];
            const secondProgram = programs[programHighRiskValues.indexOf(secondProgramValue)];
            const secondProgramTotal = globalData.programsRisk[secondProgram].high + globalData.programsRisk[secondProgram].medium + globalData.programsRisk[secondProgram].none;
            const secondProgramPerc = Math.round((globalData.programsRisk[secondProgram].high / secondProgramTotal) * 100);
            
            document.getElementById('programs-analysis').innerHTML = 
                `${topProgram} muestra la mayor proporción de estudiantes en riesgo alto (${topProgramPerc}%), seguida por ${secondProgram} (${secondProgramPerc}%). Las intervenciones de retención deben priorizarse en estas carreras, especialmente considerando que ${
                    topProgram === 'PSICOLOGÍA' ? 
                    `Psicología pertenece a la facultad de Humanidades y presenta un patrón de riesgo diferente a las carreras técnicas` : 
                    `estas carreras presentan patrones de riesgo que requieren intervenciones específicas`
                }.`;
            
            // Análisis de estadísticas por sede
            const campusWithHighestRisk = globalData.campusStats.reduce((prev, current) => 
                (prev.highRiskPerc > current.highRiskPerc) ? prev : current
            );
            
            const campusWithLowestRisk = globalData.campusStats.reduce((prev, current) => 
                (prev.highRiskPerc < current.highRiskPerc && prev.total > 5) ? prev : current
            );
            
            const campusWithHighestInasistencia = globalData.campusStats.reduce((prev, current) => 
                (prev.inasistenciaPerc > current.inasistenciaPerc) ? prev : current
            );
            
            document.getElementById('campus-stats-analysis').innerHTML = 
                `${campusWithHighestRisk.campus} presenta el mayor porcentaje de estudiantes con riesgo alto (${campusWithHighestRisk.highRiskPerc}%), mientras que ${campusWithLowestRisk.campus} muestra la proporción más baja (${campusWithLowestRisk.highRiskPerc}%). La inasistencia es particularmente alta en ${campusWithHighestInasistencia.campus} (${campusWithHighestInasistencia.inasistenciaPerc}%) y ${campusWithHighestRisk.campus} (${campusWithHighestRisk.inasistenciaPerc}%). Las estrategias de retención deben adaptarse a los perfiles de riesgo específicos de cada sede.`;
            
            // Análisis de factores de riesgo por facultad
            const facultyWithHighestInasistencia = Object.keys(globalData.facultyRisk).reduce((prev, current) => 
                globalData.facultyRisk[prev][2] > globalData.facultyRisk[current][2] ? prev : current
            );
            
            const facultyWithHighestEncuesta = Object.keys(globalData.facultyRisk).reduce((prev, current) => 
                globalData.facultyRisk[prev][3] > globalData.facultyRisk[current][3] ? prev : current
            );
            
            const facultyWithHighestNotas = Object.keys(globalData.facultyRisk).reduce((prev, current) => 
                globalData.facultyRisk[prev][1] > globalData.facultyRisk[current][1] ? prev : current
            );
            
            const facultyWithHighestMorosidad = Object.keys(globalData.facultyRisk).reduce((prev, current) => 
                globalData.facultyRisk[prev][0] > globalData.facultyRisk[current][0] ? prev : current
            );
            
            document.getElementById('faculty-risk-analysis').innerHTML = 
                `${facultyWithHighestInasistencia} presenta el mayor riesgo por inasistencia (${globalData.facultyRisk[facultyWithHighestInasistencia][2]}%) y ${facultyWithHighestEncuesta} tiene el mayor riesgo en encuesta de caracterización (${globalData.facultyRisk[facultyWithHighestEncuesta][3]}%). ${facultyWithHighestNotas} muestra el mayor porcentaje en notas insuficientes (${globalData.facultyRisk[facultyWithHighestNotas][1]}%), mientras que ${facultyWithHighestMorosidad} tiene la tasa más alta de morosidad (${globalData.facultyRisk[facultyWithHighestMorosidad][0]}%). Cada facultad requiere estrategias diferenciadas que aborden sus factores de riesgo específicos.`;
            
            // Análisis de estudiantes en riesgo por facultad
            document.getElementById('engineering-students-analysis').innerHTML = 
                `Los estudiantes de ${globalData.highRiskStudents.engineering[0]?.program || 'Ingeniería'} y ${globalData.highRiskStudents.engineering.find(s => s.program !== globalData.highRiskStudents.engineering[0]?.program)?.program || 'otras carreras de ingeniería'} presentan los mayores niveles de riesgo combinado. ${
                    globalData.highRiskStudents.engineering.filter(s => s.modality === 'SEMIPRESENCIAL').length > globalData.highRiskStudents.engineering.length / 2 ? 
                    `La mayoría de estos estudiantes críticos cursan en modalidad semipresencial, sugiriendo posibles desafíos de adaptación a este formato.` : 
                    `Los factores de riesgo están presentes en diferentes modalidades de estudio, sugiriendo causas más estructurales que el formato de enseñanza.`
                }`;
            
            document.getElementById('health-students-analysis').innerHTML = 
                `Los estudiantes de ${globalData.highRiskStudents.health[0]?.program || 'Salud'} y ${globalData.highRiskStudents.health.find(s => s.program !== globalData.highRiskStudents.health[0]?.program)?.program || 'otras carreras de salud'} muestran altos niveles de riesgo combinado. ${
                    globalData.highRiskStudents.health.filter(s => s.modality === 'PRESENCIAL').length > globalData.highRiskStudents.health.length / 2 ? 
                    `A diferencia de Ingeniería, estos estudiantes son mayoritariamente presenciales, sugiriendo que los factores de riesgo están más relacionados con exigencias académicas y financieras que con la modalidad.` : 
                    `Los factores de riesgo están distribuidos en diferentes modalidades, indicando que las causas pueden ser diversas.`
                }`;
            
            document.getElementById('humanities-students-analysis').innerHTML = 
                `La carrera de ${globalData.highRiskStudents.humanities[0]?.program || 'Humanidades'} concentra la mayor parte de estudiantes con alto riesgo en esta facultad. ${
                    globalData.highRiskStudents.humanities.filter(s => 
                        s.morosidad === 'ALTO' && 
                        s.notas === 'ALTO' && 
                        s.inasistencia === 'ALTO'
                    ).length > globalData.highRiskStudents.humanities.length / 2 ? 
                    `La presencia simultánea de morosidad, notas insuficientes e inasistencia en estos estudiantes sugiere una interrelación entre factores económicos y académicos que debe ser abordada integralmente.` : 
                    `Los factores de riesgo varían entre los estudiantes, indicando la necesidad de un enfoque personalizado en las intervenciones de retención.`
                }`;
            
            // Análisis general y recomendaciones
            generateComprehensiveAnalysis();
        }
        
        // Función para generar análisis y recomendaciones integrales
        function generateComprehensiveAnalysis() {
            // Diagnóstico general
            const highRiskPerc = Math.round((globalData.highRisk / globalData.totalStudents) * 100);
            const inasistenciaPerc = Math.round((globalData.riskTypes['INASISTENCIA'].high / globalData.totalStudents) * 100);
            const encuestaPerc = Math.round((globalData.riskTypes['ENCUESTA CARACTERIZACIÓN'].high / globalData.totalStudents) * 100);
            const morosidadPerc = Math.round((globalData.riskTypes['MOROSIDAD'].high / globalData.totalStudents) * 100);
            const notasPerc = Math.round((globalData.riskTypes['NOTAS INSUFICIENTES'].high / globalData.totalStudents) * 100);
            
            // Identificar sede con mayor riesgo
            const campusWithHighestRisk = globalData.campusStats.reduce((prev, current) => 
                (prev.highRiskPerc > current.highRiskPerc) ? prev : current
            );
            
            // Identificar carreras con mayor riesgo
            const programs = Object.keys(globalData.programsRisk);
            const programHighRiskValues = Object.values(globalData.programsRisk).map(item => item.high);
            
            const topProgram = programs[programHighRiskValues.indexOf(Math.max(...programHighRiskValues))];
            const topProgramTotal = globalData.programsRisk[topProgram].high + globalData.programsRisk[topProgram].medium + globalData.programsRisk[topProgram].none;
            const topProgramPerc = Math.round((globalData.programsRisk[topProgram].high / topProgramTotal) * 100);
            
            const secondProgramValue = [...programHighRiskValues].sort((a, b) => b - a)[1];
            const secondProgram = programs[programHighRiskValues.indexOf(secondProgramValue)];
            const secondProgramTotal = globalData.programsRisk[secondProgram].high + globalData.programsRisk[secondProgram].medium + globalData.programsRisk[secondProgram].none;
            const secondProgramPerc = Math.round((globalData.programsRisk[secondProgram].high / secondProgramTotal) * 100);
            
            // Generar diagnóstico general
            document.getElementById('general-conclusion').innerHTML = 
                `El análisis de los ${globalData.totalStudents} estudiantes revela un panorama preocupante donde el ${highRiskPerc}% presenta al menos un indicador de riesgo alto. La inasistencia (${inasistenciaPerc}%) y los factores detectados en la encuesta de caracterización (${encuestaPerc}%) son los principales predictores de deserción, seguidos por morosidad (${morosidadPerc}%) y notas insuficientes (${notasPerc}%). La ${campusWithHighestRisk.campus} y las carreras de ${topProgram} (${topProgramPerc}% en riesgo alto) y ${secondProgram} (${secondProgramPerc}% en riesgo alto) presentan los indicadores más críticos, requiriendo intervención prioritaria.`;
            
            // Generar recomendaciones específicas basadas en el análisis
            
            // Recomendación 1: Sistema de alerta temprana
            const campusWithHighestInasistencia = globalData.campusStats.reduce((prev, current) => 
                (prev.inasistenciaPerc > current.inasistenciaPerc) ? prev : current
            );
            
            const secondCampusInasistencia = [...globalData.campusStats]
                .sort((a, b) => b.inasistenciaPerc - a.inasistenciaPerc)[1];
            
            document.getElementById('recommendation-1').innerHTML = 
                `Implementar un sistema automatizado de seguimiento de asistencia en tiempo real que envíe alertas al detectar patrones de inasistencia, especialmente en ${campusWithHighestInasistencia.campus} y ${secondCampusInasistencia.campus} donde este factor supera el ${Math.min(campusWithHighestInasistencia.inasistenciaPerc, secondCampusInasistencia.inasistenciaPerc)}%. Incluir notificaciones a estudiantes y tutores académicos cuando se alcancen umbrales críticos predefinidos de 3 inasistencias consecutivas o 5 no consecutivas.`;
            
            // Recomendación 2: Programa de apoyo financiero
            document.getElementById('recommendation-2').innerHTML = 
                `Desarrollar un programa de becas parciales y planes de pago flexibles para estudiantes con alto riesgo por morosidad, priorizando las carreras de ${topProgram} (${topProgramPerc}% en riesgo alto) y ${secondProgram} (${secondProgramPerc}% en riesgo alto). Establecer un sistema de consejería financiera preventiva para estudiantes identificados en situación de vulnerabilidad económica y crear convenios con empresas para prácticas remuneradas que apoyen financieramente a estudiantes en riesgo.`;
            
            // Recomendación 3: Tutorías académicas
            const facultyWithHighestNotas = Object.keys(globalData.facultyRisk).reduce((prev, current) => 
                globalData.facultyRisk[prev][1] > globalData.facultyRisk[current][1] ? prev : current
            );
            
            document.getElementById('recommendation-3').innerHTML = 
                `Implementar un programa de tutorías personalizado para estudiantes con riesgo académico, con énfasis en la Facultad de ${facultyWithHighestNotas} que presenta el mayor porcentaje (${globalData.facultyRisk[facultyWithHighestNotas][1]}%) de estudiantes con notas insuficientes. Incorporar metodologías de enseñanza adaptativas basadas en los patrones de aprendizaje identificados por carrera y establecer comunidades de aprendizaje donde estudiantes avanzados apoyen a estudiantes de primer año.`;
            
            // Recomendación 4: Revisión de encuesta de caracterización
            document.getElementById('recommendation-4').innerHTML = 
                `Realizar un análisis profundo de los resultados de la encuesta de caracterización utilizando técnicas de minería de datos para identificar patrones y factores predictivos específicos, considerando que el ${encuestaPerc}% de estudiantes presenta riesgo alto en este indicador. Rediseñar el instrumento para mejorar su capacidad predictiva e incluir variables sociodemográficas y psicoemocionales más precisas, además de implementar un sistema de seguimiento continuo que actualice el perfil de riesgo del estudiante.`;
            
            // Recomendación 5: Programas específicos por facultad
            const facultyWithHighestInasistencia = Object.keys(globalData.facultyRisk).reduce((prev, current) => 
                globalData.facultyRisk[prev][2] > globalData.facultyRisk[current][2] ? prev : current
            );
            
            const facultyWithHighestMorosidad = Object.keys(globalData.facultyRisk).reduce((prev, current) => 
                globalData.facultyRisk[prev][0] > globalData.facultyRisk[current][0] ? prev : current
            );
            
            document.getElementById('recommendation-5').innerHTML = 
                `Desarrollar programas específicos por facultad que aborden sus factores de riesgo particulares: para ${facultyWithHighestInasistencia}, enfocarse en reducir inasistencia (${globalData.facultyRisk[facultyWithHighestInasistencia][2]}%); para ${facultyWithHighestNotas}, implementar reforzamiento académico (${globalData.facultyRisk[facultyWithHighestNotas][1]}% con notas insuficientes); y para ${facultyWithHighestMorosidad}, establecer mecanismos de apoyo financiero (${globalData.facultyRisk[facultyWithHighestMorosidad][0]}% con morosidad). Cada programa debe incluir indicadores de seguimiento y evaluación periódica de resultados.`;
        }
        
        // Función para actualizar las estadísticas generales
        function updateGeneralStats() {
            document.getElementById('total-students').textContent = globalData.totalStudents;
            document.getElementById('high-risk').textContent = globalData.highRisk;
            document.getElementById('medium-risk').textContent = globalData.mediumRisk;
            document.getElementById('no-risk').textContent = globalData.noRisk;
        }
        
        // Función para actualizar la tabla de estadísticas por sede
        function updateCampusStatsTable() {
            const tbody = document.getElementById('campus-stats-body');
            tbody.innerHTML = '';
            
            globalData.campusStats.forEach(campus => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${campus.campus}</td>
                    <td>${campus.total}</td>
                    <td>${campus.highRiskPerc}%</td>
                    <td>${campus.mediumRiskPerc}%</td>
                    <td>${campus.noRiskPerc}%</td>
                    <td>${campus.morosidadPerc}%</td>
                    <td>${campus.notasPerc}%</td>
                    <td>${campus.inasistenciaPerc}%</td>
                `;
                tbody.appendChild(row);
            });
        }
        
        // Función para actualizar las tablas de estudiantes de alto riesgo por facultad
        function updateHighRiskStudentsTables() {
            // Ingeniería
            const engineeringBody = document.getElementById('engineering-high-risk-body');
            engineeringBody.innerHTML = '';
            globalData.highRiskStudents.engineering.forEach(student => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${student.code}</td>
                    <td>${student.name}</td>
                    <td>${student.program}</td>
                    <td>${student.campus}</td>
                    <td>${student.modality}</td>
                    <td>${student.morosidad}</td>
                    <td>${student.notas}</td>
                    <td>${student.inasistencia}</td>
                    <td>${student.encuesta}</td>
                `;
                engineeringBody.appendChild(row);
            });
            
            // Salud
            const healthBody = document.getElementById('health-high-risk-body');
            healthBody.innerHTML = '';
            globalData.highRiskStudents.health.forEach(student => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${student.code}</td>
                    <td>${student.name}</td>
                    <td>${student.program}</td>
                    <td>${student.campus}</td>
                    <td>${student.modality}</td>
                    <td>${student.morosidad}</td>
                    <td>${student.notas}</td>
                    <td>${student.inasistencia}</td>
                    <td>${student.encuesta}</td>
                `;
                healthBody.appendChild(row);
            });
            
            // Humanidades
            const humanitiesBody = document.getElementById('humanities-high-risk-body');
            humanitiesBody.innerHTML = '';
            globalData.highRiskStudents.humanities.forEach(student => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${student.code}</td>
                    <td>${student.name}</td>
                    <td>${student.program}</td>
                    <td>${student.campus}</td>
                    <td>${student.modality}</td>
                    <td>${student.morosidad}</td>
                    <td>${student.notas}</td>
                    <td>${student.inasistencia}</td>
                    <td>${student.encuesta}</td>
                `;
                humanitiesBody.appendChild(row);
            });
        }
        
        // Función para actualizar los filtros de los selectores
        function updateFilterOptions() {
            // Actualizar selector de sedes
            const campusFilter = document.getElementById('campus-filter');
            campusFilter.innerHTML = '<option value="todos">Todas las sedes</option>';
            Object.keys(globalData.campusDistribution).forEach(campus => {
                const option = document.createElement('option');
                option.value = campus;
                option.textContent = campus;
                campusFilter.appendChild(option);
            });
            
            // Actualizar selector de facultades
            const facultyFilter = document.getElementById('faculty-filter');
            facultyFilter.innerHTML = '<option value="todos">Todas las facultades</option>';
            Object.keys(globalData.facultyDistribution).forEach(faculty => {
                const option = document.createElement('option');
                option.value = faculty;
                option.textContent = faculty;
                facultyFilter.appendChild(option);
            });
        }
        
        // Función para mostrar los filtros aplicados
        function displayAppliedFilters() {
            const appliedFiltersDiv = document.getElementById('applied-filters');
            const filterBadgesDiv = document.getElementById('filter-badges');
            filterBadgesDiv.innerHTML = '';
            
            let hasFilters = false;
            
            if (globalData.appliedFilters.campus !== 'todos') {
                const badge = document.createElement('span');
                badge.className = 'filter-badge';
                badge.textContent = `Sede: ${globalData.appliedFilters.campus}`;
                filterBadgesDiv.appendChild(badge);
                hasFilters = true;
            }
            
            if (globalData.appliedFilters.faculty !== 'todos') {
                const badge = document.createElement('span');
                badge.className = 'filter-badge';
                badge.textContent = `Facultad: ${globalData.appliedFilters.faculty}`;
                filterBadgesDiv.appendChild(badge);
                hasFilters = true;
            }
            
            if (globalData.appliedFilters.riskType !== 'todos') {
                const badge = document.createElement('span');
                badge.className = 'filter-badge';
                badge.textContent = `Tipo de Riesgo: ${globalData.appliedFilters.riskType}`;
                filterBadgesDiv.appendChild(badge);
                hasFilters = true;
            }
            
            appliedFiltersDiv.style.display = hasFilters ? 'block' : 'none';
        }
        
        // Función para actualizar todos los gráficos y estadísticas
        function updateAllVisualizations() {
            // Actualizar estadísticas generales
            updateGeneralStats();
            
            // Actualizar tablas
            updateCampusStatsTable();
            updateHighRiskStudentsTables();
            
            // Actualizar opciones de filtros
            updateFilterOptions();
            
            // Mostrar filtros aplicados
            displayAppliedFilters();
            
            // Actualizar gráficos
            charts.genderChart.data.datasets[0].data = [
                globalData.genderDistribution.male,
                globalData.genderDistribution.female
            ];
            charts.genderChart.update();
            
            charts.campusChart.data.labels = Object.keys(globalData.campusDistribution);
            charts.campusChart.data.datasets[0].data = Object.values(globalData.campusDistribution);
            charts.campusChart.update();
            
            charts.facultyChart.data.labels = Object.keys(globalData.facultyDistribution);
            charts.facultyChart.data.datasets[0].data = Object.values(globalData.facultyDistribution);
            charts.facultyChart.update();
            
            charts.riskChart.data.labels = Object.keys(globalData.riskTypes);
            charts.riskChart.data.datasets[0].data = Object.values(globalData.riskTypes).map(item => item.high);
            charts.riskChart.data.datasets[1].data = Object.values(globalData.riskTypes).map(item => item.medium);
            charts.riskChart.data.datasets[2].data = Object.values(globalData.riskTypes).map(item => item.none);
            charts.riskChart.update();
            
            charts.programsRiskChart.data.labels = Object.keys(globalData.programsRisk);
            charts.programsRiskChart.data.datasets[0].data = Object.values(globalData.programsRisk).map(item => item.high);
            charts.programsRiskChart.data.datasets[1].data = Object.values(globalData.programsRisk).map(item => item.medium);
            charts.programsRiskChart.data.datasets[2].data = Object.values(globalData.programsRisk).map(item => item.none);
            charts.programsRiskChart.update();
            
            const facultyNames = Object.keys(globalData.facultyRisk);
            for (let i = 0; i < facultyNames.length && i < charts.facultyRiskChart.data.datasets.length; i++) {
                charts.facultyRiskChart.data.datasets[i].data = globalData.facultyRisk[facultyNames[i]];
            }
            charts.facultyRiskChart.update();
            
            // Generar análisis de los datos
            generateAnalysis();
        }
        
        // Función para procesar el archivo Excel
        function processExcelFile(file) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const sheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[sheetName];
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);
                    
                    // Aquí procesamos los datos del Excel para actualizar nuestro objeto globalData
                    processData(jsonData);
                    
                    // Guardar los datos originales para aplicar filtros después
                    originalData = JSON.parse(JSON.stringify(globalData));
                    
                    // Actualizar visualizaciones
                    updateAllVisualizations();
                    
                    // Mostrar mensaje de éxito
                    document.getElementById('success-alert').style.display = 'block';
                    setTimeout(() => {
                        document.getElementById('success-alert').style.display = 'none';
                    }, 3000);
                } catch (error) {
                    console.error('Error al procesar el archivo:', error);
                    document.getElementById('error-alert').style.display = 'block';
                    setTimeout(() => {
                        document.getElementById('error-alert').style.display = 'none';
                    }, 3000);
                } finally {
                    document.getElementById('loader').style.display = 'none';
                }
            };
            
            reader.onerror = function() {
                console.error('Error al leer el archivo');
                document.getElementById('error-alert').style.display = 'block';
                document.getElementById('loader').style.display = 'none';
                setTimeout(() => {
                    document.getElementById('error-alert').style.display = 'none';
                }, 3000);
            };
            
            reader.readAsArrayBuffer(file);
        }
        
        // Función para procesar los datos del Excel y actualizar el objeto globalData
        function processData(jsonData) {
            // Resetear valores
            const newData = {
                totalStudents: jsonData.length,
                highRisk: 0,
                mediumRisk: 0,
                noRisk: 0,
                genderDistribution: {
                    male: 0,
                    female: 0
                },
                campusDistribution: {},
                facultyDistribution: {},
                riskTypes: {
                    'MOROSIDAD': { high: 0, medium: 0, none: 0 },
                    'DIAG. COMP. LEC': { high: 0, medium: 0, none: 0 },
                    'DIAG. RAZ. LOG.': { high: 0, medium: 0, none: 0 },
                    'NOTAS INSUFICIENTES': { high: 0, medium: 0, none: 0 },
                    'INASISTENCIA': { high: 0, medium: 0, none: 0 },
                    'INGRESO AL AULA': { high: 0, medium: 0, none: 0 },
                    'ASIGNATURAS REPROBADAS': { high: 0, medium: 0, none: 0 },
                    'ENCUESTA CARACTERIZACIÓN': { high: 0, medium: 0, none: 0 }
                },
                programsRisk: {},
                campusStats: [],
                facultyRisk: {
                    'INGENIERÍA, TECNOLOGÍA E INNOVACION': [0, 0, 0, 0],
                    'SALUD': [0, 0, 0, 0],
                    'HUMANIDADES, CIENCIAS JURÍDICAS Y SOCIALES': [0, 0, 0, 0]
                },
                highRiskStudents: {
                    engineering: [],
                    health: [],
                    humanities: []
                },
                appliedFilters: {
                    campus: 'todos',
                    faculty: 'todos',
                    riskType: 'todos'
                },
                rawData: jsonData
            };
            
            // Procesar cada estudiante
            jsonData.forEach(student => {
                // Contar por género
                if (student.SEXO === 'M') {
                    newData.genderDistribution.male++;
                } else if (student.SEXO === 'F') {
                    newData.genderDistribution.female++;
                }
                
                // Contar por sede
                if (!newData.campusDistribution[student.SEDE]) {
                    newData.campusDistribution[student.SEDE] = 0;
                }
                newData.campusDistribution[student.SEDE]++;
                
                // Contar por facultad
                if (!newData.facultyDistribution[student.Facultad]) {
                    newData.facultyDistribution[student.Facultad] = 0;
                }
                newData.facultyDistribution[student.Facultad]++;
                
                // Contar por carrera y riesgo
                if (!newData.programsRisk[student.CARRERA]) {
                    newData.programsRisk[student.CARRERA] = { high: 0, medium: 0, none: 0 };
                }
                
                // Contar niveles de riesgo generales
                let hasHighRisk = false;
                let hasMediumRisk = false;
                
                // Procesar tipos de riesgo
                const riskFields = [
                    'MOROSIDAD', 'RIESGO DIAG. COMP. LEC', 'RIESGO DIAG. RAZ. LOG.',
                    'NOTAS INSUFICIENTES', 'RIESGO INASISTENCIA', 'RIESGO INGRESO AL AULA',
                    'RIESGO ASIGNATURAS REPROBADAS', 'RIESGO ENCUESTA CARACTERIZACIÓN'
                ];
                
                const riskMappings = {
                    'RIESGO DIAG. COMP. LEC': 'DIAG. COMP. LEC',
                    'RIESGO DIAG. RAZ. LOG.': 'DIAG. RAZ. LOG.',
                    'RIESGO INASISTENCIA': 'INASISTENCIA',
                    'RIESGO INGRESO AL AULA': 'INGRESO AL AULA',
                    'RIESGO ASIGNATURAS REPROBADAS': 'ASIGNATURAS REPROBADAS',
                    'RIESGO ENCUESTA CARACTERIZACIÓN': 'ENCUESTA CARACTERIZACIÓN'
                };
                
                riskFields.forEach(field => {
                    const value = student[field];
                    const mappedField = riskMappings[field] || field;
                    
                    if (value === 'ALTO') {
                        newData.riskTypes[mappedField].high++;
                        hasHighRisk = true;
                    } else if (value === 'MEDIO') {
                        newData.riskTypes[mappedField].medium++;
                        hasMediumRisk = true;
                    } else {
                        newData.riskTypes[mappedField].none++;
                    }
                });
                
                // Incrementar contadores generales de riesgo
                if (hasHighRisk) {
                    newData.highRisk++;
                    newData.programsRisk[student.CARRERA].high++;
                } else if (hasMediumRisk) {
                    newData.mediumRisk++;
                    newData.programsRisk[student.CARRERA].medium++;
                } else {
                    newData.noRisk++;
                    newData.programsRisk[student.CARRERA].none++;
                }
                
                // Identificar estudiantes de alto riesgo para las tablas
                if (student.MOROSIDAD === 'ALTO' || student['NOTAS INSUFICIENTES'] === 'ALTO' || 
                    student['RIESGO INASISTENCIA'] === 'ALTO' || student['RIESGO ENCUESTA CARACTERIZACIÓN'] === 'ALTO') {
                    
                    const highRiskStudent = {
                        code: student.CODCLI,
                        name: student.Nombre,
                        program: student.CARRERA,
                        campus: student.SEDE,
                        modality: student.MODALIDAD,
                        morosidad: student.MOROSIDAD,
                        notas: student['NOTAS INSUFICIENTES'],
                        inasistencia: student['RIESGO INASISTENCIA'],
                        encuesta: student['RIESGO ENCUESTA CARACTERIZACIÓN']
                    };
                    
                    if (student.Facultad === 'INGENIERÍA, TECNOLOGÍA E INNOVACION') {
                        newData.highRiskStudents.engineering.push(highRiskStudent);
                    } else if (student.Facultad === 'SALUD') {
                        newData.highRiskStudents.health.push(highRiskStudent);
                    } else if (student.Facultad === 'HUMANIDADES, CIENCIAS JURÍDICAS Y SOCIALES') {
                        newData.highRiskStudents.humanities.push(highRiskStudent);
                    }
                }
            });
            
            // Calcular estadísticas por sede
            const campusList = Object.keys(newData.campusDistribution);
            newData.campusStats = campusList.map(campus => {
                const studentsInCampus = jsonData.filter(s => s.SEDE === campus);
                const total = studentsInCampus.length;
                
                if (total === 0) {
                    return {
                        campus: campus,
                        total: 0,
                        highRiskPerc: 0,
                        mediumRiskPerc: 0,
                        noRiskPerc: 0,
                        morosidadPerc: 0,
                        notasPerc: 0,
                        inasistenciaPerc: 0
                    };
                }
                
                const highRiskCount = studentsInCampus.filter(s => 
                    s.MOROSIDAD === 'ALTO' || 
                    s['NOTAS INSUFICIENTES'] === 'ALTO' || 
                    s['RIESGO INASISTENCIA'] === 'ALTO' || 
                    s['RIESGO ENCUESTA CARACTERIZACIÓN'] === 'ALTO'
                ).length;
                
                const mediumRiskCount = studentsInCampus.filter(s => 
                    (s.MOROSIDAD === 'MEDIO' || 
                    s['NOTAS INSUFICIENTES'] === 'MEDIO' || 
                    s['RIESGO INASISTENCIA'] === 'MEDIO' || 
                    s['RIESGO ENCUESTA CARACTERIZACIÓN'] === 'MEDIO') &&
                    !(s.MOROSIDAD === 'ALTO' || 
                    s['NOTAS INSUFICIENTES'] === 'ALTO' || 
                    s['RIESGO INASISTENCIA'] === 'ALTO' || 
                    s['RIESGO ENCUESTA CARACTERIZACIÓN'] === 'ALTO')
                ).length;
                
                const morosidadCount = studentsInCampus.filter(s => 
                    s.MOROSIDAD === 'ALTO' || s.MOROSIDAD === 'MEDIO'
                ).length;
                
                const notasCount = studentsInCampus.filter(s => 
                    s['NOTAS INSUFICIENTES'] === 'ALTO' || s['NOTAS INSUFICIENTES'] === 'MEDIO'
                ).length;
                
                const inasistenciaCount = studentsInCampus.filter(s => 
                    s['RIESGO INASISTENCIA'] === 'ALTO' || s['RIESGO INASISTENCIA'] === 'MEDIO'
                ).length;
                
                return {
                    campus: campus,
                    total: total,
                    highRiskPerc: Math.round((highRiskCount / total) * 100),
                    mediumRiskPerc: Math.round((mediumRiskCount / total) * 100),
                    noRiskPerc: Math.round(((total - highRiskCount - mediumRiskCount) / total) * 100),
                    morosidadPerc: Math.round((morosidadCount / total) * 100),
                    notasPerc: Math.round((notasCount / total) * 100),
                    inasistenciaPerc: Math.round((inasistenciaCount / total) * 100)
                };
            });
            
            // Calcular factores de riesgo por facultad
            const faculties = Object.keys(newData.facultyRisk);
            faculties.forEach(faculty => {
                const studentsInFaculty = jsonData.filter(s => s.Facultad === faculty);
                const total = studentsInFaculty.length;
                
                if (total === 0) return;
                
                const morosidadCount = studentsInFaculty.filter(s => 
                    s.MOROSIDAD === 'ALTO' || s.MOROSIDAD === 'MEDIO'
                ).length;
                
                const notasCount = studentsInFaculty.filter(s => 
                    s['NOTAS INSUFICIENTES'] === 'ALTO' || s['NOTAS INSUFICIENTES'] === 'MEDIO'
                ).length;
                
                const inasistenciaCount = studentsInFaculty.filter(s => 
                    s['RIESGO INASISTENCIA'] === 'ALTO' || s['RIESGO INASISTENCIA'] === 'MEDIO'
                ).length;
                
                const encuestaCount = studentsInFaculty.filter(s => 
                    s['RIESGO ENCUESTA CARACTERIZACIÓN'] === 'ALTO' || s['RIESGO ENCUESTA CARACTERIZACIÓN'] === 'MEDIO'
                ).length;
                
                newData.facultyRisk[faculty] = [
                    Math.round((morosidadCount / total) * 100),
                    Math.round((notasCount / total) * 100),
                    Math.round((inasistenciaCount / total) * 100),
                    Math.round((encuestaCount / total) * 100)
                ];
            });
            
            // Ordenar estudiantes de alto riesgo por cantidad de factores de riesgo altos
            const sortStudentsByRisk = (students) => {
                return students.sort((a, b) => {
                    const aRiskCount = ['morosidad', 'notas', 'inasistencia', 'encuesta']
                        .filter(risk => a[risk] === 'ALTO').length;
                    const bRiskCount = ['morosidad', 'notas', 'inasistencia', 'encuesta']
                        .filter(risk => b[risk] === 'ALTO').length;
                    return bRiskCount - aRiskCount;
                });
            };
            
            newData.highRiskStudents.engineering = sortStudentsByRisk(newData.highRiskStudents.engineering).slice(0, 10);
            newData.highRiskStudents.health = sortStudentsByRisk(newData.highRiskStudents.health).slice(0, 10);
            newData.highRiskStudents.humanities = sortStudentsByRisk(newData.highRiskStudents.humanities).slice(0, 10);
            
            // Actualizar el objeto global con los nuevos datos
            globalData = newData;
        }
        
        // Función para aplicar filtros a los datos
        function applyFilters() {
            // Si no hay datos originales, no podemos filtrar
            if (!originalData) {
                return;
            }
            
            // Obtener valores de los filtros
            const campusFilter = document.getElementById('campus-filter').value;
            const facultyFilter = document.getElementById('faculty-filter').value;
            const riskFilter = document.getElementById('risk-filter').value;
            
            // Guardar filtros aplicados
            globalData.appliedFilters = {
                campus: campusFilter,
                faculty: facultyFilter,
                riskType: riskFilter
            };
            
            // Si todos los filtros son "todos", restaurar datos originales
            if (campusFilter === 'todos' && facultyFilter === 'todos' && riskFilter === 'todos') {
                globalData = JSON.parse(JSON.stringify(originalData));
                globalData.appliedFilters = {
                    campus: 'todos',
                    faculty: 'todos',
                    riskType: 'todos'
                };
                updateAllVisualizations();
                return;
            }
            
            // Filtrar los datos según los criterios seleccionados
            let filteredData = originalData.rawData;
            
            if (campusFilter !== 'todos') {
                filteredData = filteredData.filter(student => student.SEDE === campusFilter);
            }
            
            if (facultyFilter !== 'todos') {
                filteredData = filteredData.filter(student => student.Facultad === facultyFilter);
            }
            
            if (riskFilter !== 'todos') {
                // Mapear nombres de riesgo del selector a campos del Excel
                const riskFieldMap = {
                    'MOROSIDAD': 'MOROSIDAD',
                    'NOTAS INSUFICIENTES': 'NOTAS INSUFICIENTES',
                    'INASISTENCIA': 'RIESGO INASISTENCIA',
                    'ENCUESTA CARACTERIZACIÓN': 'RIESGO ENCUESTA CARACTERIZACIÓN'
                };
                
                const fieldName = riskFieldMap[riskFilter];
                filteredData = filteredData.filter(student => 
                    student[fieldName] === 'ALTO' || student[fieldName] === 'MEDIO'
                );
            }
            
            // Si no hay datos después de filtrar, mostrar mensaje y restaurar
            if (filteredData.length === 0) {
                alert('No hay datos que cumplan con los criterios de filtro seleccionados.');
                document.getElementById('campus-filter').value = 'todos';
                document.getElementById('faculty-filter').value = 'todos';
                document.getElementById('risk-filter').value = 'todos';
                globalData = JSON.parse(JSON.stringify(originalData));
                globalData.appliedFilters = {
                    campus: 'todos',
                    faculty: 'todos',
                    riskType: 'todos'
                };
                updateAllVisualizations();
                return;
            }
            
            // Procesar los datos filtrados
            processData(filteredData);
            
            // Restaurar los filtros aplicados (se resetean en processData)
            globalData.appliedFilters = {
                campus: campusFilter,
                faculty: facultyFilter,
                riskType: riskFilter
            };
            
            // Actualizar visualizaciones
            updateAllVisualizations();
        }
        
        // Función para generar el PDF con alta calidad
        function generatePDF() {
            // Mostrar loader
            document.getElementById('loader').style.display = 'block';
            
            // Ocultar botones y elementos no deseados en el PDF
            const buttonsContainer = document.querySelector('.filters');
            const appliedFiltersDiv = document.getElementById('applied-filters');
            buttonsContainer.style.display = 'none';
            
            // Conservar visibilidad original para restaurar después
            const originalAppliedFiltersDisplay = appliedFiltersDiv.style.display;
            // Mostrar filtros aplicados en el PDF
            appliedFiltersDiv.style.display = globalData.appliedFilters.campus !== 'todos' || 
                                              globalData.appliedFilters.faculty !== 'todos' || 
                                              globalData.appliedFilters.riskType !== 'todos' ? 'block' : 'none';
            
            // Crear objeto jsPDF
            const { jsPDF } = window.jspdf;
            
            // Crear el PDF con orientación vertical inicial
            const doc = new jsPDF('portrait', 'mm', 'letter');
            
            // Título del documento y fecha
            doc.setFontSize(20);
            doc.setTextColor(44, 62, 80); // Color oscuro para el título
            doc.text('INFORME ANALÍTICO DE RETENCIÓN ESTUDIANTIL', 105, 20, { align: 'center' });
            
            doc.setFontSize(14);
            doc.setTextColor(52, 152, 219); // Color azul para el subtítulo
            doc.text('Universidad Autónoma de Chile', 105, 30, { align: 'center' });
            
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0); // Color negro para el texto
            doc.text('Fecha de generación: ' + new Date().toLocaleDateString(), 105, 40, { align: 'center' });
            
            // Separador
            doc.setDrawColor(52, 152, 219);
            doc.setLineWidth(0.5);
            doc.line(20, 45, 190, 45);
            
            // Agregar información de filtros aplicados si existen
            let yPosition = 55;
            
            if (globalData.appliedFilters.campus !== 'todos' || 
                globalData.appliedFilters.faculty !== 'todos' || 
                globalData.appliedFilters.riskType !== 'todos') {
                
                doc.setFontSize(14);
                doc.setTextColor(44, 62, 80);
                doc.text('Filtros aplicados:', 20, yPosition);
                yPosition += 8;
                
                doc.setFontSize(12);
                doc.setTextColor(0, 0, 0);
                
                if (globalData.appliedFilters.campus !== 'todos') {
                    doc.text(`• Sede: ${globalData.appliedFilters.campus}`, 25, yPosition);
                    yPosition += 7;
                }
                
                if (globalData.appliedFilters.faculty !== 'todos') {
                    doc.text(`• Facultad: ${globalData.appliedFilters.faculty}`, 25, yPosition);
                    yPosition += 7;
                }
                
                if (globalData.appliedFilters.riskType !== 'todos') {
                    doc.text(`• Tipo de Riesgo: ${globalData.appliedFilters.riskType}`, 25, yPosition);
                    yPosition += 7;
                }
                
                yPosition += 5;
            }
            
            // Capturar secciones del dashboard
            const dashboardSections = document.querySelectorAll('.card');
            const conclusionsSection = document.querySelector('.conclusions-section');
            let currentPage = 1;
            
            // Agregar número de página
            const addPageNumber = (orientation = 'portrait') => {
                doc.setFontSize(10);
                doc.setTextColor(100, 100, 100);
                if (orientation === 'portrait') {
                    doc.text(`Página ${currentPage}`, 180, 275);
                } else {
                    doc.text(`Página ${currentPage}`, 250, 180);
                }
            };
            
            // Añadir nueva página (vertical por defecto)
            const addNewPage = (orientation = 'portrait') => {
                doc.addPage('letter', orientation);
                currentPage++;
                yPosition = 20;
                addPageNumber(orientation);
            };
            
            // Agregar número de página a la primera página
            addPageNumber();
            
            // Función para dividir las secciones en categorías
            function categorizeSections() {
                const graphSections = [];
                const tableSections = [];
                
                dashboardSections.forEach(section => {
                    // Si contiene una tabla, es una sección de tabla
                    if (section.querySelector('table')) {
                        tableSections.push(section);
                    } else {
                        graphSections.push(section);
                    }
                });
                
                return { graphSections, tableSections };
            }
            
            const { graphSections, tableSections } = categorizeSections();
            
            // Procesar cada sección de gráfico con alta calidad
            const processGraphSections = async () => {
                for (const section of graphSections) {
                    const title = section.querySelector('h2').textContent;
                    const analysis = section.querySelector('.chart-analysis')?.textContent || '';
                    
                    // Capturar el gráfico con alta calidad
                    const canvas = await html2canvas(section, {
                        scale: 3, // Alta resolución
                        useCORS: true,
                        logging: false,
                        backgroundColor: '#ffffff'
                    });
                    
                    const imgData = canvas.toDataURL('image/png');
                    
                    // Determinar dimensiones óptimas para la página
                    const imgWidth = 170;
                    const imgHeight = Math.min((canvas.height * imgWidth) / canvas.width, 180);
                    
                    // Verificar si hay espacio suficiente en la página actual
                    if (yPosition + imgHeight + 30 > 260) {
                        addNewPage('portrait');
                    }
                    
                    // Agregar título
                    doc.setFontSize(14);
                    doc.setTextColor(52, 152, 219);
                    doc.text(title, 20, yPosition);
                    yPosition += 10;
                    
                    // Agregar imagen
                    doc.addImage(imgData, 'PNG', 20, yPosition, imgWidth, imgHeight);
                    yPosition += imgHeight + 5;
                    
                    // Agregar análisis si está disponible
                    if (analysis && analysis.trim().length > 0) {
                        doc.setFontSize(10);
                        doc.setTextColor(0, 0, 0);
                        
                        // Quitar "Análisis:" del texto
                        const analysisText = analysis.replace('Análisis:', '').trim();
                        
                        // Dividir el texto en líneas para que quepa en la página
                        const lines = doc.splitTextToSize(analysisText, 170);
                        doc.text(lines, 20, yPosition);
                        yPosition += lines.length * 5 + 15;
                    } else {
                        yPosition += 10;
                    }
                }
            };
            
            // Procesar cada sección de tabla con alta calidad en formato horizontal
            const processTableSections = async () => {
                for (const section of tableSections) {
                    // Cambiar a orientación horizontal para las tablas
                    addNewPage('landscape');
                    
                    const title = section.querySelector('h2').textContent;
                    const analysis = section.querySelector('.chart-analysis')?.textContent || '';
                    
                    // Capturar la tabla con alta calidad
                    const canvas = await html2canvas(section, {
                        scale: 2,
                        useCORS: true,
                        logging: false,
                        backgroundColor: '#ffffff'
                    });
                    
                    const imgData = canvas.toDataURL('image/png');
                    
                    // Dimensiones óptimas para la página horizontal
                    const imgWidth = 240;
                    const imgHeight = Math.min((canvas.height * imgWidth) / canvas.width, 140);
                    
                    // Agregar título
                    doc.setFontSize(14);
                    doc.setTextColor(52, 152, 219);
                    doc.text(title, 20, yPosition);
                    yPosition += 10;
                    
                    // Agregar imagen
                    doc.addImage(imgData, 'PNG', 20, yPosition, imgWidth, imgHeight);
                    yPosition += imgHeight + 5;
                    
                    // Agregar análisis si está disponible
                    if (analysis && analysis.trim().length > 0) {
                        doc.setFontSize(10);
                        doc.setTextColor(0, 0, 0);
                        
                        // Quitar "Análisis:" del texto
                        const analysisText = analysis.replace('Análisis:', '').trim();
                        
                        // Dividir el texto en líneas para que quepa en la página
                        const lines = doc.splitTextToSize(analysisText, 240);
                        doc.text(lines, 20, yPosition);
                        yPosition += lines.length * 5 + 10;
                    } else {
                        yPosition += 10;
                    }
                }
            };
            
            // Procesar sección de conclusiones
            const processConclusionsSection = async () => {
                // Cambiar a orientación vertical para las conclusiones
                addNewPage('portrait');
                
                const title = conclusionsSection.querySelector('h2').textContent;
                
                // Capturar la sección de conclusiones con alta calidad
                const canvas = await html2canvas(conclusionsSection, {
                    scale: 2,
                    useCORS: true,
                    logging: false,
                    backgroundColor: '#ffffff'
                });
                
                const imgData = canvas.toDataURL('image/png');
                
                // Dimensiones óptimas para la página vertical
                const imgWidth = 170;
                const imgHeight = Math.min((canvas.height * imgWidth) / canvas.width, 220);
                
                // Agregar título
                doc.setFontSize(16);
                doc.setTextColor(44, 62, 80);
                doc.text(title, 105, yPosition, { align: 'center' });
                yPosition += 10;
                
                // Agregar imagen
                doc.addImage(imgData, 'PNG', 20, yPosition, imgWidth, imgHeight);
            };
            
            // Procesar todas las secciones y generar el PDF
            Promise.resolve()
                .then(processGraphSections)
                .then(processTableSections)
                .then(processConclusionsSection)
                .then(() => {
                    // Restaurar elementos ocultos
                    buttonsContainer.style.display = 'flex';
                    appliedFiltersDiv.style.display = originalAppliedFiltersDisplay;
                    document.getElementById('loader').style.display = 'none';
                    
                    // Generar nombre de archivo basado en filtros
                    const filename = `Informe_Retencion_UAC${
                        globalData.appliedFilters.campus !== 'todos' ? '_' + globalData.appliedFilters.campus.replace(/\s+/g, '_') : ''
                    }${
                        globalData.appliedFilters.faculty !== 'todos' ? '_' + globalData.appliedFilters.faculty.replace(/\s+/g, '_').substring(0, 10) : ''
                    }${
                        globalData.appliedFilters.riskType !== 'todos' ? '_' + globalData.appliedFilters.riskType.replace(/\s+/g, '_').substring(0, 10) : ''
                    }.pdf`;
                    
                    // Descargar el PDF
                    doc.save(filename);
                })
                .catch(error => {
                    console.error('Error al generar el PDF:', error);
                    buttonsContainer.style.display = 'flex';
                    appliedFiltersDiv.style.display = originalAppliedFiltersDisplay;
                    document.getElementById('loader').style.display = 'none';
                    document.getElementById('error-alert').style.display = 'block';
                    setTimeout(() => {
                        document.getElementById('error-alert').style.display = 'none';
                    }, 3000);
                });
        }
        
        // Evento al cargar la página
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar gráficos
            initializeCharts();
            
            // Generar análisis inicial
            generateAnalysis();
            
            // Actualizar visualizaciones con datos iniciales
            updateAllVisualizations();
            
            // Evento para procesar el archivo Excel
            document.getElementById('process-button').addEventListener('click', function() {
                const fileInput = document.getElementById('excel-file');
                if (fileInput.files.length > 0) {
                    document.getElementById('loader').style.display = 'block';
                    processExcelFile(fileInput.files[0]);
                } else {
                    document.getElementById('error-alert').style.display = 'block';
                    setTimeout(() => {
                        document.getElementById('error-alert').style.display = 'none';
                    }, 3000);
                }
            });
            
            // Evento para aplicar filtros
            document.getElementById('apply-filters').addEventListener('click', applyFilters);
            
            // Evento para generar el PDF
            document.getElementById('generate-pdf').addEventListener('click', generatePDF);
        });
    </script>
</body>
</html>
